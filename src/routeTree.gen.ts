/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as ServicesRouteImport } from "./routes/services";
import { Route as PortfolioRouteImport } from "./routes/portfolio";
import { Route as ContactRouteImport } from "./routes/contact";
import { Route as AboutRouteImport } from "./routes/about";
import { Route as IndexRouteImport } from "./routes/index";

const ServicesRoute = ServicesRouteImport.update({
  id: "/services",
  path: "/services",
  getParentRoute: () => rootRouteImport,
} as any);
const PortfolioRoute = PortfolioRouteImport.update({
  id: "/portfolio",
  path: "/portfolio",
  getParentRoute: () => rootRouteImport,
} as any);
const ContactRoute = ContactRouteImport.update({
  id: "/contact",
  path: "/contact",
  getParentRoute: () => rootRouteImport,
} as any);
const AboutRoute = AboutRouteImport.update({
  id: "/about",
  path: "/about",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/contact": typeof ContactRoute;
  "/portfolio": typeof PortfolioRoute;
  "/services": typeof ServicesRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/contact": typeof ContactRoute;
  "/portfolio": typeof PortfolioRoute;
  "/services": typeof ServicesRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/about": typeof AboutRoute;
  "/contact": typeof ContactRoute;
  "/portfolio": typeof PortfolioRoute;
  "/services": typeof ServicesRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/about" | "/contact" | "/portfolio" | "/services";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/about" | "/contact" | "/portfolio" | "/services";
  id: "__root__" | "/" | "/about" | "/contact" | "/portfolio" | "/services";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  AboutRoute: typeof AboutRoute;
  ContactRoute: typeof ContactRoute;
  PortfolioRoute: typeof PortfolioRoute;
  ServicesRoute: typeof ServicesRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/services": {
      id: "/services";
      path: "/services";
      fullPath: "/services";
      preLoaderRoute: typeof ServicesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/portfolio": {
      id: "/portfolio";
      path: "/portfolio";
      fullPath: "/portfolio";
      preLoaderRoute: typeof PortfolioRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/contact": {
      id: "/contact";
      path: "/contact";
      fullPath: "/contact";
      preLoaderRoute: typeof ContactRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/about": {
      id: "/about";
      path: "/about";
      fullPath: "/about";
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  PortfolioRoute: PortfolioRoute,
  ServicesRoute: ServicesRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
